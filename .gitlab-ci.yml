image: mhart/alpine-node

stages:
  - lint
  - package

before_script:
  - npm ci

cache:
  key: ${CI_COMMIT_REF_SLUG}
  policy: pull
  paths:
  - node_modules/

lint:
  stage: lint
  script:
    - npm run lint

package:
  before_script:
    - VERSION="$(npm view kpods version)"
  stage: package
  artifacts:
    name: "kpods-$VERSION"
    paths:
      - kpods-*.tgz
  script:
    - npm pack

open merge request:
  image: alpine:3.9.4
  stage: integrate
  before_script: []
  except:
    - master
  only:
    - branches
  script:
    - apk add --no-cache httpie
    - http POST http://zgitlab/api/v4/projects/101/merge_requests?private_token=$GITLAB_TOKEN
      source_branch=$CI_COMMIT_REF_NAME
      target_branch=master
      id=$CI_COMMIT_SHORT_SHA
      title="üîÄ $CI_COMMIT_MESSAGE [$CI_COMMIT_SHORT_SHA]"
      squash=true
      merge_when_pipeline_succeeds=true
      remove_source_branch=true
      labels="auto-merge"
      description="üêí this is an automatic merge request created by a monkey in the CI servers üêí"
      --ignore-stdin
      --json

patch:
  stage: patch
  before_script:
    - apk add --no-cache git
    - git config --global user.name "Code Monkey"
    - git config --global user.email "code.monkey@zerto.com"
    - npm install -g release-it
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /release/
  only:
  - master
  script: 
    - git remote set-url origin http://gitlab-ci-token:$GITLAB_TOKEN@zgitlab/talhayut/kpods.git
    - git checkout master && git pull
    - release-it --ci --no-npm.publish

release:
  before_script: []
  only:
    - tags
  dependencies:
    - package
  stage: release
  script:
    - npm publish

deploy:
  image: docker:19.03
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:19.03-dind
      command: ["--insecure-registry=zgitlab.zerto.local:4567"]
  before_script: []
  only:
    - tags
  stage: deploy
  script:
    - export VERSION="$(echo $CI_COMMIT_MESSAGE | cut -d ' ' -f 2)"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY/talhayut/cli:latest
    - docker tag $CI_REGISTRY/talhayut/cli:latest $CI_REGISTRY/talhayut/cli:$VERSION
    - docker build --cache-from $CI_REGISTRY/talhayut/cli:latest -t $CI_REGISTRY/talhayut/cli .
    - docker push $CI_REGISTRY/talhayut/cli:$VERSION